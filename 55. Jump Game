Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

Example 1:

Input: [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum
             jump length is 0, which makes it impossible to reach the last index.


class Solution {
    public boolean canJump(int[] nums) {
        int reach=0;
        int i;
        for(i=0;i<nums.length&&i<=reach;i++)
        {
            reach=Math.max(nums[i]+i,reach);
            if(i==nums.length-1)
            {
                return true;
            }
        }
        return false;
        
    }
}


这个题定义一个reach变量，代表能去到的位置。reach=math.max（I+nums【I】，reach）。I+nums【I】代表当前所能到达最远的点，而reach为之前所能到达最大的点，不断跟新reach的值。
开始I从index 0开始，循环条件是I<nums.length&&I<=reach. 
如果I比reach大说明，reach不能达到最后一个点。
例如【2，3，1，1，1，0，1】一列数组，当到达0时，index为5，此时reach为5，进行循环i++，但是i=6>5,说明不能到达最后一个点。
