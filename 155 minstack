Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.

class MinStack {

    Stack<Integer> mainstack= new Stack<Integer>();
    Stack<Integer> minstack= new Stack<Integer>();
    
    /** initialize your data structure here. */
    public MinStack() {
        
    }
    
    public void push(int x) {
        mainstack.push(x);
        
        if(minstack.isEmpty()||x<=minstack.peek())
        {
            minstack.push(x);
        }
    }
    
    public void pop() {
        int val=mainstack.peek();
        if (val==minstack.peek()){
            minstack.pop();
        }
        mainstack.pop();
    }
    
    public int top() {
        return mainstack.peek();
    }
    
    public int getMin() {
        int val=minstack.peek();
        return val;
        
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
 
 
方法：
stack.peek（） 返回栈顶的元素，不删除栈顶的值。
建立一个minstack 存放最小值，每次入栈时，和栈顶比较，确保栈顶元素是最小值。
弹栈时，和minstack栈顶元素比较，如果相等，minstack也要弹出，确保获得最小值时，minstack中的值和mainstack能对应起来。
