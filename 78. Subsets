Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]


class Solution 
{
    public List<List<Integer>> subsets(int[] nums) 
    {
        List<List<Integer>> list=new ArrayList<List<Integer>>();
        for( int i=0;i<(1<<nums.length);i++)
        {
            List<Integer> sub=new ArrayList<>();
            for(int j=0;j<nums.length;j++)
            {
                if(((i>>j)&1)==1)
                {
                    sub.add(nums[j]);
                }
            }
            list.add(sub);
        }
        return list;
            
        }
    }


位运算，
i,代表子集的个数，总共有2^n个子集，从前往后第j位和1相与，如果为1，则放入第j个元素。
根本想不出来   :-I


class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> list=new ArrayList<List<Integer>>();
        List<Integer> temp=new ArrayList<>();
        backtrack(list,temp,nums,0);
        return list;
    }
    public void backtrack(List<List<Integer>> list, List<Integer> temp, int[] nums, int j){
        list.add(new ArrayList<>(temp));
        for(int i=j;i<nums.length;i++){
            temp.add(nums[i]);
            backtrack(list,temp,nums,i+1);
            temp.remove(temp.size()-1);
        }
    }
}

 回溯：
 https://blog.csdn.net/qq_38277033/article/details/88389520
 Int i=0的时候，list 添加【】， 此时temp为【1】，进行递归，调用i=1，此时list 添加【1】， 此时list 为【】，【1】，temp变成【1，2】，
 调用i=2，list 添加【1，2】，temp变成【1，2，3】 调用i=3，list添加【1，2，3】，由于3不小于nums.length， 退出循环，回退到i=2，
 temp.remove（temp.size（）-1），去掉nums【2】，此时temp变成【1，2】，开始for循环，i++ ，i=3，不满足条件，开始回退到i=1，
 此时temp变成【1】，开始for循环，i++ ，i=2，temp 变成【1，3】。在进行接下来的操作。
 
 
 想不出来。。。
