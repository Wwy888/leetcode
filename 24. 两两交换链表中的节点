https://www.cnblogs.com/GoodRnne/p/10580333.html


Given a linked list, swap every two adjacent nodes and return its head. 
You may not modify the values in the list's nodes, only nodes itself may be changed.

 Example:          
 Given 1->2->3->4, you should return the list as 2->1->4->3.
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head==null||head.next==null){
            return head;
        }
        ListNode P= new ListNode(0);
        ListNode cur,next,ret;
        cur=head;
        ret=head.next;
        while (cur!=null&&cur.next!=null)
        {
            next=cur.next;
            cur.next=next.next;
            next.next=cur;
            P.next=next;
            P=cur;
            cur=cur.next;
        }
        return ret;
    }
}

方法：

详见 https://www.cnblogs.com/GoodRnne/p/10580333.html
创建新的点时候要用new；
头指针永远指向linkedlist第一个点；
cur.next=next.next;表示cur 的下一个点是next 的下一个点；也就是cur指向next 的下个点。
创建一个新的点是为了便于返回;


