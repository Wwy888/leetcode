Given an array of citations sorted in ascending order (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.

According to the definition of h-index on Wikipedia: "A scientist has index h if h of his/her N papers have at least h citations each, and the other N − h papers have no more than h citations each."

Example:

Input: citations = [0,1,3,5,6]
Output: 3 
Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had 
             received 0, 1, 3, 5, 6 citations respectively. 
             Since the researcher has 3 papers with at least 3 citations each and the remaining 
             two with no more than 3 citations each, her h-index is 3.
Note:

If there are several possible values for h, the maximum one is taken as the h-index.

Follow up:

This is a follow up problem to H-Index, where citations is now guaranteed to be sorted in ascending order.
Could you solve it in logarithmic time complexity?



class Solution {
    public int hIndex(int[] citations) {
        int left=0;
        int n=citations.length;
        int right=n-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(n-mid==citations[mid])
            {
                return n-mid;
            }
            else if(citations[mid]>n-mid)
            {
                right=mid-1;
            }
            else
            {
                left=mid+1;
            }
        }
        return n-left;
    }
}

方法：

每次二分取中间的值，我们关注这个mid位置到最右边的距离（即大于citations[mid]的有几篇文章）和citations[mid]的关系

１．即如果(len - mid) == citations[mid]，则这个距离就是我们能够得到的最大h-index

２．如果(len - mid) ＜ citations[mid]，则说明我要找的位置在中点的左边，即我们有更多引用次数超过(len - mid)的文章

３．如果(len - mid) ＞ citations[mid]，说明我们要找的位置应该在中点的右边，即我们没有那么多引用次数超过(len - mid)的文章

最后left会停在答案的位置.所以最后回len-mid。


