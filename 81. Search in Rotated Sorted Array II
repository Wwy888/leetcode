
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false


class Solution {
    public boolean search(int[] nums, int target) {
        int left=0;
        int right=nums.length-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            
            if (nums[mid]==target)
            {
                return true;
            }
            if(nums[mid]==nums[left]){
                left++;
            }
            else if(nums[mid]>nums[left])
            {
                if(target<nums[mid]&&nums[left]<=target){
                    right=mid-1;
                }
                else{
                    left=mid+1;
                }
            }
            
            else if(nums[mid]<nums[left])
            {
                if(target>nums[mid]&&target<=nums[right]){
                    left=mid+1;
                }
                else{
                    right=mid-1;
                }
            }
            
        }
        return false;
    }
}

和33不同的是，这个题可能会有相同元素，也就是nums[mid]等于边界的情况，这种情况下，就需要移动边界的指针，直到边界不相等为止。
其他情况和33题一样，如果mid左边有序并且target位于左边数组，移动右指针 right=mid-1，如果target不在左边，说明位于无序的右边，left=mid+1
如果mid右边有序并且target位于右边数组，移动左指针left=mid+1，如果target不在右边，说明位于无序的左边，right=mid-1。

               
          
