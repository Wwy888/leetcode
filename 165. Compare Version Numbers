Compare two version numbers version1 and version2.
If version1 > version2 return 1; if version1 < version2 return -1;otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.

The . character does not represent a decimal point and is used to separate number sequences.

For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

You may assume the default revision number for each level of a version number to be 0. For example, version number 3.4 has a revision number of 3 and 4 for its first and second level revision number. Its third and fourth level revision number are both 0.

 Example 1:

Input: version1 = "0.1", version2 = "1.1"
Output: -1
Example 2:

Input: version1 = "1.0.1", version2 = "1"
Output: 1
Example 3:

Input: version1 = "7.5.2.4", version2 = "7.5.3"
Output: -1
Example 4:

Input: version1 = "1.01", version2 = "1.001"
Output: 0
Explanation: Ignoring leading zeroes, both “01” and “001" represent the same number “1”
Example 5:

Input: version1 = "1.0", version2 = "1.0.0"
Output: 0
Explanation: The first version number does not have a third level revision number, which means its third level revision number is default to "0"


class Solution {
    public int compareVersion(String version1, String version2) {
        String [] v1= version1.split("\\.");
        String [] v2=version2.split("\\.");
        int i=v1.length;
        int j=v2.length;
        int length=Math.max(i,j);
        for(i=0;i<length;i++){
            Integer a1= (i<v1.length?Integer.parseInt(v1[i]):0);
            Integer a2=(i<v2.length?Integer.parseInt(v2[i]):0);
            if(a1!=a2)
            {
                int a=a1.compareTo(a2);
                return a;
            }
        }
        return 0;
    }
}

方法：
先把string 1和 string2 进行分割，取两个数组的最大长度，如果i比两个数组的长度都小，比较两个数组的元素的值，
如果一个数组已经遍历完，另一个还没有，遍历完的返回0，和没有遍历完的数组的元素的值进行比较，
最后返回0，说明遍历完2个数组，所有数组的元素都相等。


Java中的 split  函数是用于按指定字符（串）或正则去分割某个字符串，结果以字符串数组形式返回；
但是对某些特殊字符，如果字符(串)正好是正则的一部分，则需要转义才能使用，
这些字符有 | , + , * , ^ , $ , / , | , [ , ] , ( , ) , - , . , \等, 因它们是正则表达式中的一部分(有特殊含义，.代表除换行符以外的所有单字符）, 所以如果想用该字符本身, 这些字符需要进行转义才能表示它本身；
例如，想用 | 竖线去分割某字符，因 | 本身是正则表达式中的一部分，所以需要 \ 去转义，因转义使用 \, 而这个 \ 正好也是正则表达式的字符，所以还得用一个 \ , 所以需要两个 \\

eg:
正则表达式定义了字符串的模式。
正则表达式可以用来搜索、编辑或处理文本。
正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。
正则表达式实例
一个字符串其实就是一个简单的正则表达式，例如 Hello World 正则表达式匹配 "Hello World" 字符串。
.（点号）也是一个正则表达式，它匹配任何一个字符如："a" 或 "1"。
