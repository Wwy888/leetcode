Given an input string, reverse the string word by word.

 

Example 1:

Input: "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: "  hello world!  "
Output: "world! hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.
 

Note:

A word is defined as a sequence of non-space characters.
Input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.
You need to reduce multiple spaces between two words to a single space in the reversed string。

class Solution {
    public String reverseWords(String s) {
        if(s.length()==0){ 
            return "";
        }
           
        int i;
        String [] arr=s.split(" ");
        StringBuilder sb=new StringBuilder();
        for( i=arr.length-1;i>=0;i--){
           if(!arr[i].equals("")){
                sb.append(arr[i]);
                sb.append(" ");
            }
        }
        return sb.length()==0?"":sb.substring(0,sb.length()-1);
    }
}

方法：
首先根据空格把string s分割成数组，建立一个新的string builder。 
然后从后开始遍历数组，如果数组中的元素不是，stringbuilder append 单词，然后append 空格。
因为最后一个单词也append 空格，所以返回的时候要返回0，length-1；


单引号是char类型， 双引号是string。
String [] arr=s.split(" "); 双引号之间一定有空格， 根据空格把string s 分割，如果没有空格，arr[i]会变成一个一个字母
（arr[i]里面，split之后不会有空格）。
!arr[i].equals("")不能写成arr[i]！=“”  ==和equals 不一样， ==比较两个变量或实例是不是指向同一个内存空间，
                                      而equals 是比较两个变量是否指向内存空间的值相等。
