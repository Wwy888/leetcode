Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Example 1:

Input: [1,3,5,6], 5
Output: 2
Example 2:

Input: [1,3,5,6], 2
Output: 1
Example 3:

Input: [1,3,5,6], 7
Output: 4
Example 4:

Input: [1,3,5,6], 0
Output: 0


class Solution {
    public int searchInsert(int[] nums, int target) {
        int left=0;
        int right=nums.length-1;
        while(left<=right){
            int mid =left+(right-left)/2;
            if(nums[mid]==target){
                return mid;
            }
            else if (nums[mid]<target){
                left=mid+1;
            }
            else
            {
                right = mid-1;
            }
        }
        return left;
    }
}

二分法解题关键点：
1. low和high 初始值：数组 ，0到N-1；
2.循环结束条件：
如果target 存在， 循环条件是low<high, 当low=high=target 时，结束循环。
如果target 不一定存在数组中，循环条件是low<=high ，当low>high时退出循环，   
3.区间缩减：确定区间缩减的关键问题是确保target一直在缩减当区间之内。
需要注意到是：right=mid 没关系，但是 left=mid 有可能导致死循环，当left 和right相邻时，
left=mid时，如果又进入left=mid  分支，相当于区间没有缩小。但是right一定大于mid,所以不会造成死循环。
           
