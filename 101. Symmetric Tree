Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
 

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3
 

Note:
Bonus points if you could solve it both recursively and iteratively.

/**    recursive
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
    
           return (root==null)||(isSymmetrichelp(root.left,root.right));
     
        
    }
    private boolean isSymmetrichelp(TreeNode left, TreeNode right){
        if(left==null||right==null){
            return left==right;
        }
        if(left.val!=right.val){
            return false;
        }
        else {
            return isSymmetrichelp(left.left,right.right)&&isSymmetrichelp(left.right,right.left);
        }
    }
}
方法：
遍历结束的标志是判断当前节点是否为空，
如果为空，return (root==null || isSymmetrichelp(root.left,root.right)
如果非空，return isSymmetrichelp(root.left,right);

isSymmetrichelp(left,right)
先判断着两个TreeNode 是否是空指针，如果是，返回left==right；
如果两个值不相等，放回false；
如果相等，判读下一层，左节点的左和右节点的右， 左节点的右和右节点的左。
isSymmetrichelp(left.left,right.right)&&isSymmetric(left.right, right.left)


/**  iterative
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        Queue<TreeNode> queue=new LinkedList<>();

        if(root!=null)
        {
            queue.add(root.left);
            queue.add(root.right);
            while(!queue.isEmpty())
            {
                TreeNode left=queue.remove();
                TreeNode right= queue.remove();
                
                if(left==null&&right==null){
                    continue;
                }
                if(left==null||right==null||left.val!=right.val)
                {
                    return false;
                }
                
                queue.add(left.left);
                queue.add(right.right);
                
                queue.add(left.right);
                queue.add(right.left);
    
            }
        }
        return true;
    }
}
方法：
最重要边际条件要写对：

1.	如果左和右都为空，继续，递归和迭代不一样的地方，递归如果有一个为空，可以返回继续判断，
但是迭代是如果写if（left==null||right==null）{ return left==null}. 如果在两个都为空的情况下，直接返回true，下面不会再判断，会出错，
所以要分开写，如果left==null&&right==null， 这种情况下 continue，

2.	因为第一个判断了两个都为空的时候，所以，接下来左或者右只要有一个为空， 返回false，而且如果两个点值不相等，返回false。


