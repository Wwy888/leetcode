Given an array of integers, find out whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k.

Example 1:

Input: nums = [1,2,3,1], k = 3, t = 0
Output: true
Example 2:

Input: nums = [1,0,1,1], k = 1, t = 2
Output: true
Example 3:

Input: nums = [1,5,9,1,5,9], k = 2, t = 3
Output: false


class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
       
        TreeSet<Integer> set=new TreeSet<Integer>();
        
        for(int i=0;i<nums.length;i++)
        {
            if(i>k)
            {
                set.remove(nums[i-k-1]);
            }
            int n=nums[i];
            if(set.floor(n)!=null&&set.floor(n)+t>=n||set.ceiling(n)!=null&&set.ceiling(n)-t<=n)
            {
                return true;
            }  
            else{
                set.add(nums[i]);
            }
            
        }
        return false;
    }
}

这个题用到了Tree Set数据结构，主要是Tree set有set.floor（n）返回Tree set中最大的小于等于n的值，set.ceiliing（n）返回Tree set 中最小的大于等于n 的值
一定要先判断set.floor(n)或set.ceiling（n）是否为空，否则会产生空指针的错误。
