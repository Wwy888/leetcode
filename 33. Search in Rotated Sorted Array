Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

class Solution {
    public int search(int[] nums, int target) {
        int left=0;
        int right=nums.length-1;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            if(nums[mid]==target)
            {
                return mid;
            }
            if(nums[mid]>=nums[left])
            {
                if(nums[left]<=target&&nums[mid]>=target)
                {
                    right=mid-1;
                }
                else{
                    left=mid+1;
                }
            }
            else
            {
                if(nums[mid]<=target&&target<=nums[right])
                {
                    left=mid+1;
                }
                else{
                    right=mid-1;
                }
            }
              
        }
        return -1;
        }
    }
    
    since its a rotated array, so it was divede into two part, and at the beginning, we should find out which part is acending.
    if nums[mid]>nums[left], the left part is ascending. then we need to find whether the target is in this part. if the answer 
     is yes, then we need to shrink the interval ã€‚ let right=mid-1
     if not then target value must located in the other part, so move the left boundary, left=mid+1
     
