Given a non-empty array of digits representing a non-negative integer, plus one to the integer.

The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.

You may assume the integer does not contain any leading zero, except the number 0 itself.

Example 1:

Input: [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Example 2:

Input: [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.

class Solution {
    public int[] plusOne(int[] digits) {
        for( int i=digits.length-1;i>=0;i--){
            digits[i]++;
            digits[i]=digits[i]%10;
            if(digits[i]!=0){
                return digits;
            }
        }
        digits=new int[digits.length+1];
        digits[0]=1;
        return digits;
    }
}

方法：
分为两种情况：
1.末尾不为9
2.末尾为9

末尾不为9，直接加1返回；
末尾为9，又分为两种，：
a,首位为9，需要扩大数组的容量，首位置1，其余为0；
b,首位不为9，最后一位加1后，各个位置加1，直至首位，如果digits【i】%10！=0， 直接返回digits。
