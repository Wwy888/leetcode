Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

class Solution {
    public int maxProfit(int[] prices) {
        int prev=0;
        int profit=0;
        if(prices.length==0)
        {
            return 0;
        }
        else
        {
            int a =prices.length;
            int small=prices[0];
            for(int i=0;i<a;i++)
            {
                if(small>prices[i])
                {
                    small=prices[i];
                }
                    profit=Math.max(prices[i]-small,prev);
                    prev=profit;
            }
        }
        return profit;
    }
}


这个题主要是解题的思路，
定义最低价格，如果出现比最低价格还小的，进行替换，价格返回最大值，因为价格每次都是和目前最小的进行比较，而且卖出必须在买入之后，确保了返回的是最大值。
