Given a binary tree, return the postorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [3,2,1]
Follow up: Recursive solution is trivial, could you do it iteratively?

recursive:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List <Integer> list = new ArrayList<>();
        postordertraversal(root, list);
        return list;
    }
    private void postordertraversal(TreeNode root, List<Integer> list){
        if(root==null){
            return ;
        }
        postordertraversal(root.left,list);
        postordertraversal(root.right, list);
        list.add(root.val);
    }
}
后序遍历：左右根。

/**// iterative
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
       List<Integer> list =new ArrayList<>();
        if(root ==null){
            return list;
        }
        Stack <TreeNode> stack=new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode treenode = stack.pop();
            list.add(treenode.val);
            if(treenode.left!=null){
                stack.push(treenode.left);
            }
            if(treenode.right!=null){
                stack.push(treenode.right);
            }
        }
        Collections.reverse(list);
        return list;
}
}

方法：
前序遍历的顺序是根左右，后续遍历是左右根，
可以先写出前序遍历，然后把list翻转，其中左右入栈的顺序要改变一下。
Collection.reverse(list)  翻转列表。
