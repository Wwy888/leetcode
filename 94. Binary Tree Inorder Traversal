Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {   //递归
    public List<Integer> inorderTraversal(TreeNode root) {
        List <Integer> list=new ArrayList<>();
        inordertraversal(root,list);
        return list;
    }
    private void inordertraversal(TreeNode root, List<Integer> list){
        if(root==null){
            return;
        }
        inordertraversal(root.left, list);
        list.add(root.val);
        inordertraversal(root.right, list);
       
    }
}

 方法：
 中序遍历：根左右。
 
 nonrecursive:
 
